/*

The following iterative sequence is defined for the set of positive integers:

n → n/2 (n is even)
n → 3n + 1 (n is odd)

Using the rule above and starting with 13, we generate the following sequence:
13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1

It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.

Which starting number, under one million, produces the longest chain?

NOTE: Once the chain starts the terms are allowed to go above one million.


Bruteforce: on démarre à 1 et on fait tous les entiers jusque 999'999. Et on compte à chaque fois le nombre de steps. Il suffit de stocker le nombre de départ et le nombre de steps associé.

Est-ce qu'il n'y aurait pas moyen que les nombres premiers aient une suite plus grande ? à priori, un nombre impair va toujours faire monter la suite alors que les pairs la feront descendre. Il faut maximiser les chances de tomber sur un nombre pair qui, divisé par 2, ramène à un nombre impair.

On peut commencer par 3 et faire la séquence. Ensuite, on peut détecter les nombres déjà vus et ne pas répéter la séquence en entier, mais ça fait qu'à chaque pas on compare le nombre obtenu par un tableau de taille grandissante. si on stocke dans un json avec les clés:
nombre début de séquence: int,
longueur de la séquence: int

Et on fait des recherches par clés à chaque step pour additionner les longueurs sans tout recalculer ? C'est un peu plus léger que répéter les séries en entier, non ? Du coup on peut bruteforce un peu plus facilement.

On recherche: 837799

 */

Donc ce que fait le programme:

Dictionary<keyType, valueType> dictionary_name = new Dictionary<keyType, valueType>();

dictionary_name.Add(key, value); // la key est le nombre de départ et la value est le nombre de steps, donc int,int dans notre cas.

stocke n nombre de départ dans dictionary_name comme key

while n < 1 000 000 // la grande boucle qui permet de tester tous les n jusque 1 million

	while result != 1 // la sous-boucle qui teste la série

 if (chainLengths.ContainsKey(n))
        {
            chainLength += chainLengths[n]; //si n est une key, alors la key renvoie vers la value...

		if dictionary_name.ContainsKey(result)
			int value;
				if (dictionary_name.TryGetValue(key, out value))
				{
    					// Key was found, value is set to the associated value
    					Console.WriteLine("Key was found, value is: " + value);
				}
			count + = value
			break
		count++ //si on est là, on va forcément faire un step
		if n%2
			result /= 2
		else
			count++ //si on est là, on fait un step de plus
			result = (3result+1)/2
	Quand le while est fini, on stocke count value dans le dictionary_name à côté de son nombre de départ key

n++

