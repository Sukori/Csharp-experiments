/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Donc pour résoudre ça, on commence par faire une somme.
Ici, on accept les diviseurs jusqu'au nombre lui-même, on veut tous les diviseurs du nombre et on cherche le premier qui a plus de 500 diviseurs.
Il faut que le nombre soit au moins un multiple de 2 ET 3, pour garder un max de possibilités.

Pour économiser du temps: on compte maximum 501 diviseurs (over five hundred divisors) puis on stoppe. On n'a pas besoin de la liste complète...

On devrait ignorer des tas de nombres comme les nombres premiers ou les multiples de 5 qui font de mauvais candidats, mais on perdrait plus de temps à vérifier si un nombre et premier plutôt que juste le tester. Bon ignorer un modulo 5 ou 10, ça semble pas si bête. On ignore des mauvais candidats assez vite...

Bref, step by step:
On prend la variable d'incrément du triangle qui démarre à 2
On initie un compteur à 0
@ : On commence par compter les diviseurs de 1 -> compteur = 1
Test si le compteur est > 500
    si oui, log le triangle
    si non
        on réinitialise le compteur de diviseurs
        on incrémente le triangle par son incrémenteur
        incrémenteur ++
        @ : On recommence à compter les diviseurs du nouveau triangle
*/

using System;

namespace ProjectEuler
{
    public class Problem12
    {
        public void HighlyDivisibleTriangularNumber()
        {
            Console.WriteLine("P12");
            Console.ReadKey();
        }
    }
}